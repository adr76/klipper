[delayed_gcode clear_display]
# UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
gcode:
  M117

[oled_controller]
i2c_mcu: host
i2c_bus: i2c.0

ready_gcode:
    M117 klippy:ready

disconnect_gcode:
    M117 klippy:disconnect

btn_up_gcode:
    {% set led=printer.oled_controller.leds.filament|int %}
    {% if led %}
        M117 Retract 10mm
    {% else %}
        M117 Z UP -0.1mm
    {% endif %}	
btn_filament_gcode:
    {% set led=printer.oled_controller.leds.filament|int %}
    {% if led %}
        M117 Filament Change
    {% else %}
        M117 Filament Load
    {% endif %}	
btn_down_gcode:
    {% set led=printer.oled_controller.leds.filament|int %}
    {% if led %}
        M117 Extrude 10mm
    {% else %}
        M117 Z Down +0.1mm
    {% endif %}	
btn_1_gcode:
    M117 Home All
btn_2_gcode:
    M117 Move center
# btn_3_gcode:
#     M117 Key 6
# btn_4_gcode:
#     M117 Key 7
btn_5_gcode:
    M117 Case Light On/Off
btn_pwr_gcode:
    M117 Power
btn_fan_gcode:
    M117 Set Fan speed
btn_pause_gcode:
    M117 Pause Print
                    
#------------------------------------------

[gcode_macro mcp]
# default_parameter_SENSOR: htu21d enclosure_temp
gcode:
    # {action_respond_info(
    #     "Temperature: %.2f C\n"
    #     "Humidity: %.2f%%" % (
    #         printer[SENSOR].temperature,
    #         printer[SENSOR].humidity))}
    {action_respond_info(
        "oled_controller: %s" % (
            printer["oled_controller"]|pprint))}


[gcode_macro OLED]
# Set Oled Sleep On/Off
# OLED S={ 1 0 }
gcode:
    {% if params.S|int %}
        # ON
        # i2cset -y 0 0x3c 0x00 0xAF
        # RESPOND MSG="// action:oled_on"
        M118 OLED ON
    {% else %}
        # OFF
        # i2cset -y 0 0x3c 0x00 0xAE
        # RESPOND MSG="// action:oled_off"
        M118 OLED OFF
    {% endif %}


